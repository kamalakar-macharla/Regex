sed [-n] script[file...]
sed [-n][-e script]...[-f script_file]...[file...]

sed -n '2,6p' text
sed -n '/regex/p' text
sed -n '/^[$].*[=]/p' sedtext 
$myvar=groovy
$javahome=c:\drive

sed -i  # if you -i option then you actually editing on file
		# without -i then seeing changes on console only

sed 's/^..//' file1.txt > file2.txt  # deleting first two char from line, ..$ for last two char
echo "+919867904907" | sed 's/^.../Mobile: /'  # Mobile: 9867904907
echo "+919867904907:Kamalakar" | sed 's/^.*:/Name: /'  # Name: Kamalakar

team_email: team@domain.ca
sed 's/team_email.*/team_email: team@domain.ca/g' ./config.yml   # here . is single char * multiple of singles char
sed "s/team_email.*/team_email: $EMAILID/g" ./config.yml         # use double-quotes to access variables

sed -n '/^[$].*[=]/s/$/; write-out/p' sedtext 
$myvar=groovy; write-out
$javahome=c:\drive; write-out 
then Edit the above result with sed -i '/^[$].*[=]/s/$/; write-out/' sedtext

rp="; write-output myvar=\$groovy"
sed -i "/^[$].*[=]/s/$/$rp/" sedtext     double-quotes allows the variables

pwd | tr "/" " " | sed 's/^\s//'
sed '/clear/ a\ line add' set-db-config.sh
clear
 line add

sed '=' set-db-config.sh | sed 'N;s/\n/:/'  #25: linenumber

sed -i 's/kamalakar/KAMAL/Ig' case.txt # ignore case
sed -i '/kamalakar/Id' case.txt # ignore case to delete
sed -i 's/^x.*/xp/g' case.txt # . is to match any char, here * is to match one or more of any char

sed '5d' a.txt  # Delete a particular line
sed '3,5d' a.txt
sed '2,$d' a.txt # $ refer last line
sed '/pattern/d' filename
sed '/^$/d' a.txt # to delete blank line
sed -i "s/country/$cntry/g" $proj/$1/db/config/common-db.json

e GitHub-Repos mastermind Bash code-snippets-practice
pwd | tr "/" " " | sed 's/\s/\n/g'
e
GitHub-Repos
mastermind
Bash
code-snippets-practice

echo "foo bar baz qux" | sed 's/.*bar baz.*/___kamal mac___/'  # output: ___kamal mac___
echo "foo bar baz qux" | sed 's/.*\(bar baz\).*/___\1___/'   # output: ___bar baz___
The .*'s around the search string will match everything but the string, and the parentheses tell sed to remember what it matched. 
You can refer to the first matched string with \1.
Here's an example (replacing everything but 'bar baz'):

echo '$powershell_variable=Itsvalue' | sed '/^\$.*=/p'  # This prints only powershell variables in a file

Multiple expressions in one command using the -e option
echo 'erors with last' | sed -e 's/erors/errors/g' -e 's/last/final/g'  # errors with final

Important: if you get an “illegal byte sequence error” (mostly happens on sed), add the following to your script
export LC_CTYPE=C
export LANG=C

sed -i 's/emailJenkinsNotificationsTo.*com$/emailJenkinsNotificationsTo: DevOps_GRS@abszue.com/g' ./${REPO}/jenkins/common-deploy.properties

