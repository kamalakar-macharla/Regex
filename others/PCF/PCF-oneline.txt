
Run $ cf push APP-NAME to push an app the easiest way, using default settings.
$ cf push .     # The manifest file must be named manifest.yml and reside in the directory where you run cf push.

VCAP-SERVICES
https://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES


STS IDE, cf cli
Maven, Gradle build tools

pcf self-installation version on top (IaaS) Infra structure as service (Aws,google cloud,Microsoft Azure)
This allows lot of portability.

org: Banking,Insurance, Capital Market, Corporate
spaces: dev, qa, prod

Market Place:
	Fully Managed Services
		New Relic (APM)
		Auto-Scalar
		Config-server
		MySql-DB
		Service-Registry
		Rabbit-Mq
		Blaze-Meter(Performance Testing Plat-Form)
Services are binds to Space

1. Market place services
2. user-provided services

PCF-dev : self-contained pcf installation for developers and laptops/pcs

Space:
	development
		App's	Services	Routes 	Members		settings

pivotal webservices: subcription & resource useage based billing
pws is fully managed pivotal cloud foundary services, available as a service
pws is quickest and seamless

cf login -a apiurl -u username -p password -O org-name -s spacename

pcf = PaaS (Application As a Service)
Kubernatis = PaaS(Container As a Service)

cf target packet-demo prod
	api endpoint:
	api version:
	user:
	org:
	space:
	
$ cf services
  Getting services in org xxxxx/space yyyyy as kamalakar

Diego Brain is a service within PCF that allocates resources
The CF Router facilitates routing & service Registry within PCF
The cloud controller Exposes a REST Interface
The UAA is an OAuth2 server with in pcf
* OAuth2.0 server to protect your API with access token

Container app's are gets generated with in the Diego cell
cf router : responsible for load-balancing
Buildpacks : java, node, Ruby
buildpacks provide framework and runtime support for apps
Build packs typically examine your apps to determine what dependencies to download
and how to configure the apps to communicate with bound services.

Build packager : in house one , within in your firewall

---1.6 Role & Permission
- member'scan
	Invite New member:
	Assign Orgs Role:
		Org Manager		Org Auditor
		
	Assign Space Role:
		Space Manager	space developer  space auditor
dev:
qa:
prod:

who provides the resources to the applications to start? Ans: Diego Cell

						|cloud controller : create an app
Cf command line Tools   |Blob Store : Store the app's bits
						|Diego cell : Allocates the Resources to the starting app
						
demo2cdc  * Running
overview 	services	Router		Logs	Tasks	Trace	Threads

Instances
---------------------------------------------------------------
  #  | App Health	|  CPU   |  Memory  |  Disk   |  UpTime
---------------------------------------------------------------

---- 1.8
When app is bound to a service, PCF passes the credentials to the application via VCAP_SERVICES runtime arguments

------ 1.10 leveraging auto configuration to Bootstarp your application ----
change the application.properties to application.yml file
spring:
	profiles:
		active:
		- dev

---- Spring Boot integarates with PCF ----
1. PCF runs your app with "cloud spring profile"
2. when "cloud" profile is detected, spring boot apps auto-configure with vcap_services
-----
Application - Right click
	Run As
		Run Configuration
			Arguments
				VM arguments
					-Djava.security.egd=file:/dev/./urandom
					-Dspring.profiles.active=cloud
					
---Spring boot integarates with PCF
Environment variable
	vcap_services
1. PCF Injects variable into your java app at runtime
2. This facilitates spring boot auto-configure
{
 "user-provided": [
	{
		"name": "mydb2",
		"lable": "user-provided",
		"credentials": {
			"jdbcurl": "jdbc:db2://hll345."
			"password": "no_secrets"
			"username": "dbuser2"
		}
	}

  ]
}
 
if spring boot detects the "default" profile, it will attempt to connect to local instances
 of services you have added as dependencies. This is called "smart/sensible_defaults" in spring boot.

--you can specify spring profile by adding it to your application.properties or application.yml 
or by passing it as a runtime arguments to your app.

. spring boot auto-configuration is a feature of the library that provides smart default configuration for beans
. spring boot auto-configuration reduces the need for boilerplate configuration code
. spring component scan detects and initializes beans in the class path with smart defaults
. spring auto-configuration helps developers finish application faster

 --- New Relic service broker ---
New Relic APM supports real-time instrumentation and monitoring of application performance via its embedded agent that runs with apps.

New Relic agent code publishes performance monitoring metrics and other details back to New Relic APM Dashboard.

The language agents also send all of the application and browser events to New Relic Analytics tool, Insights, for visualization and dashboarding.

















