


Hello Everyone, 
 
I am looking for an opportunity for DevOps profile.

Current location - Hyderabad
Total exp - 10 years 
Skills - Jenkins CI/CD, Pivotal Cloud Foundary, MicroServices, GitHub/Gitlab, Artifactory, SonarQube, Fortify, Blackduck, New Relic,
 Maven, Ansible, Docker, Linux, AWS , Jira, ServiceNow
 
Grade/Designation: C1/Senior Consultant
 
Please let me know if there is any opportunity.
Thank You, 
Kamalakar Macharla
Mobile- 9867 904 907
Email â€“ kamalakar.macharla@capgemini.com


------------- devops Tools set -------------
Configuration Management Tools : Ansible, chef, puppet
SCM Tools/Versioning : GitHub, GitLab, Bitbucket, TFS
Build Management : Maven, Gradle
CI Tools : Jenkins, Bamboo, Teamcity	
Code Analysis : SonarQube, Fortify , blackduck (security, operational and legal risk associated with any open source)
Unit Testing  : Junit (maven-surefire-plugin)
packaging Management : jar, war, Ear
Repository Management : Artifactory, Nexus
Container : Docker
Code Coverage : Jacoco or Cobertura	
Monitoring Tools:
	Infrastructure Monitoring : Nagios, Zabbix, New Relic Infrastructure, Datadog
	Log Monitoring : Splunk, ELBK (elastic search(like DB), log stack(streaming component), kibana (UI component to display))
	Performance Monitoring (APM) : New Relic, AppDynamics                  https://docs.run.pivotal.io/marketplace/services/newrelic/
Security : SonarQube, Fortify, AppScan, Blackduck
planing and requirement Gathering : Jira, ServiceNow
Terraform : is an open-source infrastructure as code software tool created by HashiCorp.
Cloud Foundry : is an open source cloud platform as a service (PaaS). Cloud Foundry makes the process of building, testing, deploying and scaling applications must easier and faster.
Confluence : Create, collaborate, and organize all your work in one place
-------------------------------

--------- pipeline manulif--------
stage('Init') {
stage('Increase Patch Version') {
stage('Resolve Dependencies & Build') {                            mvnGoal += " -Dfortify.sca.buildId=\"${fortifyBuildId}\"" + " -Dfortify.sca.sourceanalyzer.executable=\"${fortifyRunner.fortifyRoot}/bin/sourceanalyzer\"" + ' com.fortify.sca.plugins.maven:sca-maven-plugin:clean' + ' com.fortify.sca.plugins.maven:sca-maven-plugin:translate'
stage('Run Unit Tests') {                                          sh "mvn ${mvnSettings} ${pipelineParams.mavenTestGoal}"
stage('Gating') {
	parallel {
		stage('Code Review (SonarQube)') {						   SonarQubeRunner.runScan(this, PipelineType.JAVA_MAVEN, { sonarParams -> artifactoryMaven.run pom: mvnPom, goals: "${mvnSettings} sonar:sonar ${sonarParams}".toString(), buildInfo: buildInfo }, unix, MRCommitsList, projectVersion)
		stage('Open-Source Governance (BlackDuck)') {
		stage('Open-Source Governance (Snyk)') {
		stage('Security Code Scanning (fortify)') {			       fortifyRunner.run(pipelineParams.fortifyScanTree) #5465y
stage('Package and Store') {                                       artifactoryHelper.uploadMavenArtifact(pipelineParams, GIT_COMMIT     #56te3
stage('Trigger Deployment and Automated Testing Pipeline') {	   build job: "${pipelineParams.deploymentJenkinsJobName}",             #76rt54

----------------------------------

























































------ 5465y ---
fortifyResult = fortifyRunner.run(pipelineParams.fortifyScanTree)
if (!fortifyResult.codeSecurityGatePassed) {
    if (pipelineParams.fortifyGating) {
        currentBuild.result = 'FAILED'; error("Failed on Code Security assessment: ${fortifyResult.message}")
    } 
    else if (currentBuild.result != 'FAILED') {
        currentBuild.result = 'UNSTABLE'
    }
}
-------------------
------ #56te3 -----
artifactoryHelper.uploadMavenArtifact(pipelineParams,
      GIT_COMMIT,
      mvnSettings,
      sonarQubeResult.codeQualityGatePassed,
      blackDuckResult.governanceGatePassed,
      snykRunner.result.governanceGatePassed,
      fortifyResult.codeSecurityGatePassed,
      sonarQubeResult.message,
      blackDuckResult.message,
      snykRunner.result.message,
      fortifyResult.message,
      projectVersion.toString())

------ #76rt54 ----
stage('Trigger Deployment and Automated Testing Pipeline') {
    when { expression { return pipelineParams.deploymentJenkinsJobName && ('MERGE' != env.gitlabActionType && 'NOTE' != env.gitlabActionType) } }
    steps {
        build job: "${pipelineParams.deploymentJenkinsJobName}",
  wait: false,
  parameters: [[$class: 'StringParameterValue', name: 'commit_id', value: "${GIT_COMMIT}"]]
    }
}
------------------






